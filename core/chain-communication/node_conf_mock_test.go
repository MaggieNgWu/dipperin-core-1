// Copyright 2019, Keychain Foundation Ltd.
// This file is part of the dipperin-core library.
//
// The dipperin-core library is free software: you can redistribute
// it and/or modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The dipperin-core library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/dipperin/dipperin-core/core/chain-communication (interfaces: NodeConf)

package chain_communication

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of NodeConf interface
type MockNodeConf struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeConfRecorder
}

// Recorder for MockNodeConf (not exported)
type _MockNodeConfRecorder struct {
	mock *MockNodeConf
}

func NewMockNodeConf(ctrl *gomock.Controller) *MockNodeConf {
	mock := &MockNodeConf{ctrl: ctrl}
	mock.recorder = &_MockNodeConfRecorder{mock}
	return mock
}

func (_m *MockNodeConf) EXPECT() *_MockNodeConfRecorder {
	return _m.recorder
}

func (_m *MockNodeConf) GetNodeName() string {
	ret := _m.ctrl.Call(_m, "GetNodeName")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockNodeConfRecorder) GetNodeName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNodeName")
}

func (_m *MockNodeConf) GetNodeType() int {
	ret := _m.ctrl.Call(_m, "GetNodeType")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockNodeConfRecorder) GetNodeType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNodeType")
}
