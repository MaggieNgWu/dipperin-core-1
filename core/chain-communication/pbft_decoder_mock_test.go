// Copyright 2019, Keychain Foundation Ltd.
// This file is part of the dipperin-core library.
//
// The dipperin-core library is free software: you can redistribute
// it and/or modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The dipperin-core library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/dipperin/dipperin-core/core/chain-communication (interfaces: P2PMsgDecoder)

package chain_communication

import (
	model "github.com/dipperin/dipperin-core/core/model"
	p2p "github.com/dipperin/dipperin-core/third-party/p2p"
	gomock "github.com/golang/mock/gomock"
)

// Mock of P2PMsgDecoder interface
type MockP2PMsgDecoder struct {
	ctrl     *gomock.Controller
	recorder *_MockP2PMsgDecoderRecorder
}

// Recorder for MockP2PMsgDecoder (not exported)
type _MockP2PMsgDecoderRecorder struct {
	mock *MockP2PMsgDecoder
}

func NewMockP2PMsgDecoder(ctrl *gomock.Controller) *MockP2PMsgDecoder {
	mock := &MockP2PMsgDecoder{ctrl: ctrl}
	mock.recorder = &_MockP2PMsgDecoderRecorder{mock}
	return mock
}

func (_m *MockP2PMsgDecoder) EXPECT() *_MockP2PMsgDecoderRecorder {
	return _m.recorder
}

func (_m *MockP2PMsgDecoder) DecodeTxMsg(_param0 p2p.Msg) (model.AbstractTransaction, error) {
	ret := _m.ctrl.Call(_m, "DecodeTxMsg", _param0)
	ret0, _ := ret[0].(model.AbstractTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockP2PMsgDecoderRecorder) DecodeTxMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecodeTxMsg", arg0)
}

func (_m *MockP2PMsgDecoder) DecodeTxsMsg(_param0 p2p.Msg) ([]model.AbstractTransaction, error) {
	ret := _m.ctrl.Call(_m, "DecodeTxsMsg", _param0)
	ret0, _ := ret[0].([]model.AbstractTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockP2PMsgDecoderRecorder) DecodeTxsMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecodeTxsMsg", arg0)
}

func (_m *MockP2PMsgDecoder) DecoderBlockMsg(_param0 p2p.Msg) (model.AbstractBlock, error) {
	ret := _m.ctrl.Call(_m, "DecoderBlockMsg", _param0)
	ret0, _ := ret[0].(model.AbstractBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockP2PMsgDecoderRecorder) DecoderBlockMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecoderBlockMsg", arg0)
}
