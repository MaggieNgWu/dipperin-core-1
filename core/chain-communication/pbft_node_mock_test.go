// Copyright 2019, Keychain Foundation Ltd.
// This file is part of the dipperin-core library.
//
// The dipperin-core library is free software: you can redistribute
// it and/or modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The dipperin-core library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/caiqingfeng/dipperin-core/core/chain-communication (interfaces: PbftNode)

package chain_communication

import (
	model "github.com/dipperin/dipperin-core/core/model"
	p2p "github.com/dipperin/dipperin-core/third-party/p2p"
	gomock "github.com/golang/mock/gomock"
)

// Mock of PbftNode interface
type MockPbftNode struct {
	ctrl     *gomock.Controller
	recorder *_MockPbftNodeRecorder
}

// Recorder for MockPbftNode (not exported)
type _MockPbftNodeRecorder struct {
	mock *MockPbftNode
}

func NewMockPbftNode(ctrl *gomock.Controller) *MockPbftNode {
	mock := &MockPbftNode{ctrl: ctrl}
	mock.recorder = &_MockPbftNodeRecorder{mock}
	return mock
}

func (_m *MockPbftNode) EXPECT() *_MockPbftNodeRecorder {
	return _m.recorder
}

func (_m *MockPbftNode) AddPeer(_param0 PmAbstractPeer) error {
	ret := _m.ctrl.Call(_m, "AddPeer", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPbftNodeRecorder) AddPeer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddPeer", arg0)
}

func (_m *MockPbftNode) ChangePrimary(_param0 string) {
	_m.ctrl.Call(_m, "ChangePrimary", _param0)
}

func (_mr *_MockPbftNodeRecorder) ChangePrimary(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ChangePrimary", arg0)
}

func (_m *MockPbftNode) OnEnterNewHeight(_param0 uint64) {
	_m.ctrl.Call(_m, "OnEnterNewHeight", _param0)
}

func (_mr *_MockPbftNodeRecorder) OnEnterNewHeight(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnEnterNewHeight", arg0)
}

func (_m *MockPbftNode) OnNewMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "OnNewMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPbftNodeRecorder) OnNewMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnNewMsg", arg0)
}

func (_m *MockPbftNode) OnNewP2PMsg(_param0 p2p.Msg, _param1 PmAbstractPeer) error {
	ret := _m.ctrl.Call(_m, "OnNewP2PMsg", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPbftNodeRecorder) OnNewP2PMsg(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnNewP2PMsg", arg0, arg1)
}

func (_m *MockPbftNode) OnNewWaitVerifyBlock(_param0 model.AbstractBlock, _param1 string) {
	_m.ctrl.Call(_m, "OnNewWaitVerifyBlock", _param0, _param1)
}

func (_mr *_MockPbftNodeRecorder) OnNewWaitVerifyBlock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnNewWaitVerifyBlock", arg0, arg1)
}
