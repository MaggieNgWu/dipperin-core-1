// Copyright 2019, Keychain Foundation Ltd.
// This file is part of the dipperin-core library.
//
// The dipperin-core library is free software: you can redistribute
// it and/or modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The dipperin-core library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/caiqingfeng/dipperin-core/core/chain-communication (interfaces: VerifiersReader)

package chain_communication

import (
	common "github.com/dipperin/dipperin-core/common"
	gomock "github.com/golang/mock/gomock"
)

// Mock of VerifiersReader interface
type MockVerifiersReader struct {
	ctrl     *gomock.Controller
	recorder *_MockVerifiersReaderRecorder
}

// Recorder for MockVerifiersReader (not exported)
type _MockVerifiersReaderRecorder struct {
	mock *MockVerifiersReader
}

func NewMockVerifiersReader(ctrl *gomock.Controller) *MockVerifiersReader {
	mock := &MockVerifiersReader{ctrl: ctrl}
	mock.recorder = &_MockVerifiersReaderRecorder{mock}
	return mock
}

func (_m *MockVerifiersReader) EXPECT() *_MockVerifiersReaderRecorder {
	return _m.recorder
}

func (_m *MockVerifiersReader) CurrentVerifiers() []common.Address {
	ret := _m.ctrl.Call(_m, "CurrentVerifiers")
	ret0, _ := ret[0].([]common.Address)
	return ret0
}

func (_mr *_MockVerifiersReaderRecorder) CurrentVerifiers() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CurrentVerifiers")
}

func (_m *MockVerifiersReader) NextVerifiers() []common.Address {
	ret := _m.ctrl.Call(_m, "NextVerifiers")
	ret0, _ := ret[0].([]common.Address)
	return ret0
}

func (_mr *_MockVerifiersReaderRecorder) NextVerifiers() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NextVerifiers")
}

func (_m *MockVerifiersReader) ShouldChangeVerifier() bool {
	ret := _m.ctrl.Call(_m, "ShouldChangeVerifier")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockVerifiersReaderRecorder) ShouldChangeVerifier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShouldChangeVerifier")
}
