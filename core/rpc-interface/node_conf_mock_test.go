// Copyright 2019, Keychain Foundation Ltd.
// This file is part of the dipperin-core library.
//
// The dipperin-core library is free software: you can redistribute
// it and/or modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The dipperin-core library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/caiqingfeng/dipperin-core/core/dipperin/service (interfaces: NodeConf)

// Package rpc_interface is a generated GoMock package.
package rpc_interface

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNodeConf is a mock of NodeConf interface
type MockNodeConf struct {
	ctrl     *gomock.Controller
	recorder *MockNodeConfMockRecorder
}

// MockNodeConfMockRecorder is the mock recorder for MockNodeConf
type MockNodeConfMockRecorder struct {
	mock *MockNodeConf
}

// NewMockNodeConf creates a new mock instance
func NewMockNodeConf(ctrl *gomock.Controller) *MockNodeConf {
	mock := &MockNodeConf{ctrl: ctrl}
	mock.recorder = &MockNodeConfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeConf) EXPECT() *MockNodeConfMockRecorder {
	return m.recorder
}

// GetIsStartMine mocks base method
func (m *MockNodeConf) GetIsStartMine() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsStartMine")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetIsStartMine indicates an expected call of GetIsStartMine
func (mr *MockNodeConfMockRecorder) GetIsStartMine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsStartMine", reflect.TypeOf((*MockNodeConf)(nil).GetIsStartMine))
}

// GetNodeHTTPPort mocks base method
func (m *MockNodeConf) GetNodeHTTPPort() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeHTTPPort")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNodeHTTPPort indicates an expected call of GetNodeHTTPPort
func (mr *MockNodeConfMockRecorder) GetNodeHTTPPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeHTTPPort", reflect.TypeOf((*MockNodeConf)(nil).GetNodeHTTPPort))
}

// GetNodeName mocks base method
func (m *MockNodeConf) GetNodeName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNodeName indicates an expected call of GetNodeName
func (mr *MockNodeConfMockRecorder) GetNodeName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeName", reflect.TypeOf((*MockNodeConf)(nil).GetNodeName))
}

// GetNodeP2PPort mocks base method
func (m *MockNodeConf) GetNodeP2PPort() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeP2PPort")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNodeP2PPort indicates an expected call of GetNodeP2PPort
func (mr *MockNodeConfMockRecorder) GetNodeP2PPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeP2PPort", reflect.TypeOf((*MockNodeConf)(nil).GetNodeP2PPort))
}

// GetNodeType mocks base method
func (m *MockNodeConf) GetNodeType() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeType")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNodeType indicates an expected call of GetNodeType
func (mr *MockNodeConfMockRecorder) GetNodeType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeType", reflect.TypeOf((*MockNodeConf)(nil).GetNodeType))
}

// GetUploadURL mocks base method
func (m *MockNodeConf) GetUploadURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUploadURL indicates an expected call of GetUploadURL
func (mr *MockNodeConfMockRecorder) GetUploadURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadURL", reflect.TypeOf((*MockNodeConf)(nil).GetUploadURL))
}

// SoftWalletDir mocks base method
func (m *MockNodeConf) SoftWalletDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftWalletDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// SoftWalletDir indicates an expected call of SoftWalletDir
func (mr *MockNodeConfMockRecorder) SoftWalletDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftWalletDir", reflect.TypeOf((*MockNodeConf)(nil).SoftWalletDir))
}

// SoftWalletName mocks base method
func (m *MockNodeConf) SoftWalletName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftWalletName")
	ret0, _ := ret[0].(string)
	return ret0
}

// SoftWalletName indicates an expected call of SoftWalletName
func (mr *MockNodeConfMockRecorder) SoftWalletName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftWalletName", reflect.TypeOf((*MockNodeConf)(nil).SoftWalletName))
}
